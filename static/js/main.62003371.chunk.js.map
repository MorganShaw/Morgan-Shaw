{"version":3,"sources":["white-transparent-arrow-25.png","Initials_Logo_MS.png","last_attempt_edited_des.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","arrow","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,wD,yECA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,sD,iKCqE5BC,MAvDf,WACE,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,cACjB,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAf,OAGF,yBAAKA,UAAU,cACb,wBAAIA,UAAU,QAAd,eACA,wBAAIA,UAAU,SAAd,sBAGJ,yBAAKA,UAAU,SACb,wBAAIA,UAAU,QAAd,QACA,wBAAIA,UAAU,QAAd,QACA,wBAAIA,UAAU,QAAd,SACA,wBAAIA,UAAU,QAAd,aAGJ,6BAASA,UAAU,iBACjB,yBAAKA,UAAU,eACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,WAAd,sEACA,6BACA,6BACA,wBAAIA,UAAU,UAAd,6BAEF,2QAEA,6BAMA,kDAAuB,0BAAOA,UAAU,gBAAjB,cAAvB,KAA0E,0BAAOA,UAAU,gBAAjB,QAA1E,SAA2H,0BAAOA,UAAU,gBAAjB,OAA3H,WAA6K,0BAAOA,UAAU,gBAAjB,SAA7K,KAA2N,0BAAOA,UAAU,gBAAjB,QAA3N,KAAwQ,0BAAOA,UAAU,gBAAjB,WAAxQ,SAA4T,0BAAOA,UAAU,gBAAjB,cAA5T,iJAGA,6BACA,uKAEF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,QAAQC,IAAKC,IAAOC,IAAI,gBChDjCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62003371.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/white-transparent-arrow-25.3ab3d0b8.png\";","module.exports = __webpack_public_path__ + \"static/media/Initials_Logo_MS.57557018.png\";","module.exports = __webpack_public_path__ + \"static/media/last_attempt_edited_des.2c122a33.jpeg\";","import React from 'react';\n// import {Link} from 'react-router-dom';\nimport logo from './Initials_Logo_MS.png';\n// import me from './final_answer_des.jpeg';\nimport me from './last_attempt_edited_des.jpeg';\n// import arrow from './6438188.png';\nimport arrow from './white-transparent-arrow-25.png';\nimport './reset.css';\nimport './App.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import './Components/About';\n// import './Components/Contact';\n// import './Components/Work';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className='whole-page'>\n        <header className=\"App-header\">\n          <div className='left-stuff'>\n            <div className='logo-container'>\n              <div className='logo'>MS</div>\n              {/* <img src={logo} alt='logo'/> */}\n            </div>\n            <div className='name-title'>\n              <h1 className='name'>Morgan Shaw</h1>\n              <h1 className='title'>|  Web Developer</h1>\n            </div>\n          </div>\n          <div className='links'>\n            <h2 className='link'>Home</h2>\n            <h2 className='link'>Work</h2>\n            <h2 className='link'>About</h2>\n            <h2 className='link'>Contact</h2>\n          </div>\n        </header>\n        <section className='main-content1'>\n          <div className='pic-overlay'>\n            <div className='about-text'>\n              <div className='subheading'>\n                <h1 className='smaller'>Composer → MPA → Teacher → Flight Attendant → </h1>\n                <br/>\n                <br/>\n                <h1 className='bigger'>Full-Stack Web Developer</h1>\n              </div>\n              <p> I took an unconventional path to get here, but it’s made me a creative, analytical, growth-oriented, team-driven professional who can work with a diverse group of people (and industries), learn quickly, and see the bigger picture. \n              </p>\n              <br/>\n              {/* <br/> */}\n              {/* <div className='about-text-styled'>\n                <p>I code primarily in <p  className='bigger-focus'>JavaScript, HTML, and CSS, </p>using React, Node, Express, and PostgreSQL. My toolbox also includes RESTful APIs, Postman, Massive, Git, GitHub, Debugging, JSON, React Context and Hooks, Redux, SCSS, and Socket.IO. \n                </p>\n              </div> */}\n              <p>I code primarily in <span  className='bigger-focus'>JavaScript</span>, <span  className='bigger-focus'>HTML</span>, and <span  className='bigger-focus'>CSS</span>, using <span  className='bigger-focus'>React</span>, <span  className='bigger-focus'>Node</span>, <span  className='bigger-focus'>Express</span>, and <span  className='bigger-focus'>PostgreSQL</span>. My toolbox also includes RESTful APIs, Postman, Massive, Git, GitHub, Debugging, JSON, React Context and Hooks, Redux, SCSS, and Socket.IO. \n              </p>\n              {/* <br/> */}\n              <br/>\n              <p>If this sounds good to you, take a minute to look around and see how I can contribute to your team. With my sidekick, Desi, of course. </p>\n            </div>\n            <div className='arrow-container'>\n              <img className='arrow' src={arrow} alt='arrow'/>\n            </div>\n          </div>\n        </section>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}